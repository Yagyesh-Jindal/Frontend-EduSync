{"ast":null,"code":"var _jsxFileName = \"E:\\\\project-capg\\\\frontend\\\\src\\\\pages\\\\AssessmentEditPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner } from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { assessmentService, courseService } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AssessmentEditPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [courses, setCourses] = useState([]);\n  const [assessmentForm, setAssessmentForm] = useState({\n    title: \"\",\n    courseId: \"\",\n    maxScore: 100,\n    questions: []\n  });\n\n  // Fetch assessment data and courses on component mount\n  useEffect(() => {\n    // Only instructors should access this page\n    if (user && user.role !== \"Instructor\") {\n      navigate(\"/\");\n      return;\n    }\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch courses for dropdown\n        const coursesResponse = await courseService.getInstructorCourses();\n        setCourses(coursesResponse.data || []);\n\n        // Fetch assessment if editing\n        if (id) {\n          await fetchAssessmentData();\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setError(\"Failed to load data. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [id, user]);\n  const fetchAssessmentData = async () => {\n    try {\n      const response = await assessmentService.getAssessmentById(id);\n      if (response.data) {\n        const assessmentData = response.data;\n\n        // Parse questions if they're stored as a JSON string\n        let questions = [];\n        if (typeof assessmentData.questions === 'string') {\n          try {\n            questions = JSON.parse(assessmentData.questions);\n          } catch (e) {\n            console.error(\"Error parsing questions:\", e);\n            questions = [];\n          }\n        } else if (Array.isArray(assessmentData.questions)) {\n          questions = assessmentData.questions;\n        }\n\n        // Format questions to ensure they have the correct structure\n        questions = questions.map((q, index) => {\n          return {\n            id: q.id || `q${index + 1}`,\n            text: q.text || q.questionText || `Question ${index + 1}`,\n            options: (q.options || []).map((opt, optIndex) => {\n              if (typeof opt === 'string') {\n                return {\n                  id: `opt${optIndex}`,\n                  text: opt\n                };\n              }\n              return {\n                id: opt.id || `opt${optIndex}`,\n                text: opt.text || opt.optionText || `Option ${optIndex + 1}`\n              };\n            }),\n            correctOption: q.correctOption || \"\",\n            points: q.points || 1\n          };\n        });\n        setAssessmentForm({\n          title: assessmentData.title || \"\",\n          courseId: assessmentData.courseId || \"\",\n          maxScore: assessmentData.maxScore || 100,\n          questions: questions\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching assessment:\", error);\n      setError(\"Failed to load assessment. Please try again.\");\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setAssessmentForm({\n      ...assessmentForm,\n      [name]: value\n    });\n  };\n  const updateQuestion = (index, field, value) => {\n    const updatedQuestions = [...assessmentForm.questions];\n    if (field === \"option\") {\n      // Update option text\n      const [optionIndex, optionValue] = value;\n      updatedQuestions[index].options[optionIndex].text = optionValue;\n    } else if (field === \"optionId\") {\n      // Update option ID\n      const [optionIndex, optionValue] = value;\n      updatedQuestions[index].options[optionIndex].id = optionValue;\n    } else {\n      // Update other question fields\n      updatedQuestions[index][field] = value;\n    }\n    setAssessmentForm({\n      ...assessmentForm,\n      questions: updatedQuestions\n    });\n  };\n  const addQuestion = () => {\n    setAssessmentForm({\n      ...assessmentForm,\n      questions: [...assessmentForm.questions, {\n        id: `q${assessmentForm.questions.length + 1}`,\n        text: \"\",\n        options: [{\n          id: \"a\",\n          text: \"\"\n        }, {\n          id: \"b\",\n          text: \"\"\n        }, {\n          id: \"c\",\n          text: \"\"\n        }, {\n          id: \"d\",\n          text: \"\"\n        }],\n        correctOption: \"a\",\n        points: 1\n      }]\n    });\n  };\n  const removeQuestion = index => {\n    const updatedQuestions = [...assessmentForm.questions];\n    updatedQuestions.splice(index, 1);\n\n    // Update IDs to ensure they're sequential\n    const reindexedQuestions = updatedQuestions.map((q, idx) => ({\n      ...q,\n      id: `q${idx + 1}`\n    }));\n    setAssessmentForm({\n      ...assessmentForm,\n      questions: reindexedQuestions\n    });\n  };\n  const addOption = questionIndex => {\n    const updatedQuestions = [...assessmentForm.questions];\n    const optionLetters = \"abcdefghijklmnopqrstuvwxyz\";\n    const nextOptionIndex = updatedQuestions[questionIndex].options.length;\n    if (nextOptionIndex < optionLetters.length) {\n      updatedQuestions[questionIndex].options.push({\n        id: optionLetters[nextOptionIndex],\n        text: \"\"\n      });\n      setAssessmentForm({\n        ...assessmentForm,\n        questions: updatedQuestions\n      });\n    }\n  };\n  const removeOption = (questionIndex, optionIndex) => {\n    const updatedQuestions = [...assessmentForm.questions];\n\n    // Ensure we keep at least 2 options\n    if (updatedQuestions[questionIndex].options.length > 2) {\n      var _updatedQuestions$que;\n      updatedQuestions[questionIndex].options.splice(optionIndex, 1);\n\n      // If the removed option was the correct one, set the first option as correct\n      if (updatedQuestions[questionIndex].correctOption === ((_updatedQuestions$que = updatedQuestions[questionIndex].options[optionIndex]) === null || _updatedQuestions$que === void 0 ? void 0 : _updatedQuestions$que.id)) {\n        updatedQuestions[questionIndex].correctOption = updatedQuestions[questionIndex].options[0].id;\n      }\n      setAssessmentForm({\n        ...assessmentForm,\n        questions: updatedQuestions\n      });\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      setSaving(true);\n      setError(null);\n      setSuccess(null);\n\n      // Validate form\n      if (!assessmentForm.title.trim()) {\n        setError(\"Assessment title is required\");\n        setSaving(false);\n        return;\n      }\n      if (!assessmentForm.courseId) {\n        setError(\"Please select a course\");\n        setSaving(false);\n        return;\n      }\n      if (assessmentForm.questions.length === 0) {\n        setError(\"At least one question is required\");\n        setSaving(false);\n        return;\n      }\n\n      // Validate questions\n      for (let i = 0; i < assessmentForm.questions.length; i++) {\n        const q = assessmentForm.questions[i];\n        if (!q.text.trim()) {\n          setError(`Question ${i + 1} text is required`);\n          setSaving(false);\n          return;\n        }\n        if (q.options.length < 2) {\n          setError(`Question ${i + 1} must have at least 2 options`);\n          setSaving(false);\n          return;\n        }\n        for (let j = 0; j < q.options.length; j++) {\n          if (!q.options[j].text.trim()) {\n            setError(`Option ${j + 1} in Question ${i + 1} is required`);\n            setSaving(false);\n            return;\n          }\n        }\n        if (!q.correctOption) {\n          setError(`Please select a correct answer for Question ${i + 1}`);\n          setSaving(false);\n          return;\n        }\n      }\n\n      // Format assessment data for submission\n      const formattedAssessment = {\n        title: assessmentForm.title,\n        courseId: assessmentForm.courseId,\n        maxScore: parseInt(assessmentForm.maxScore),\n        questions: JSON.stringify(assessmentForm.questions)\n      };\n      let response;\n      if (id) {\n        // Update existing assessment\n        response = await assessmentService.updateAssessment(id, formattedAssessment);\n        setSuccess(\"Assessment updated successfully!\");\n      } else {\n        // Create new assessment\n        response = await assessmentService.createAssessment(formattedAssessment);\n        setSuccess(\"Assessment created successfully!\");\n\n        // Navigate to the edit page with the new ID\n        if (response.data && response.data.assessmentId) {\n          navigate(`/assessment/edit/${response.data.assessmentId}`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving assessment:\", error);\n      setError(\"Failed to save assessment. Please try again.\");\n    } finally {\n      setSaving(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"py-5 text-center\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        onClick: () => navigate('/assessment-management'),\n        children: \"\\u2190 Back to Assessment Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mb-4\",\n      children: id ? \"Edit Assessment\" : \"Create Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Assessment Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Assessment Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  name: \"title\",\n                  value: assessmentForm.title,\n                  onChange: handleInputChange,\n                  placeholder: \"Enter assessment title\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 3,\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Max Score\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"number\",\n                  name: \"maxScore\",\n                  min: \"1\",\n                  max: \"100\",\n                  value: assessmentForm.maxScore,\n                  onChange: handleInputChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 3,\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Course\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  name: \"courseId\",\n                  value: assessmentForm.courseId,\n                  onChange: handleInputChange,\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Course\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 21\n                  }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: course.courseId,\n                    children: course.title\n                  }, course.courseId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mb-3\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), assessmentForm.questions.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"info\",\n        children: \"No questions added yet. Click \\\"Add Question\\\" to start creating your assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this) : assessmentForm.questions.map((question, qIndex) => /*#__PURE__*/_jsxDEV(Card, {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          className: \"d-flex justify-content-between align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mb-0\",\n            children: [\"Question \", qIndex + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-danger\",\n            size: \"sm\",\n            onClick: () => removeQuestion(qIndex),\n            children: \"Remove Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Question Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: question.text,\n              onChange: e => updateQuestion(qIndex, \"text\", e.target.value),\n              placeholder: \"Enter question text\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Question ID (for reference)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: question.id,\n              onChange: e => updateQuestion(qIndex, \"id\", e.target.value),\n              placeholder: \"Question ID\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Points\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              min: \"1\",\n              value: question.points,\n              onChange: e => updateQuestion(qIndex, \"points\", parseInt(e.target.value)),\n              style: {\n                width: \"100px\"\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this), question.options.map((option, oIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex mb-2 align-items-center\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"radio\",\n                name: `correct-option-${qIndex}`,\n                checked: question.correctOption === option.id,\n                onChange: () => updateQuestion(qIndex, \"correctOption\", option.id),\n                className: \"me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: option.id,\n                onChange: e => updateQuestion(qIndex, \"optionId\", [oIndex, e.target.value]),\n                placeholder: \"ID\",\n                className: \"me-2\",\n                style: {\n                  width: \"80px\"\n                },\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: option.text,\n                onChange: e => updateQuestion(qIndex, \"option\", [oIndex, e.target.value]),\n                placeholder: `Option ${oIndex + 1}`,\n                className: \"flex-grow-1\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 23\n              }, this), question.options.length > 2 && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-danger\",\n                size: \"sm\",\n                className: \"ms-2\",\n                onClick: () => removeOption(qIndex, oIndex),\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 25\n              }, this)]\n            }, oIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              size: \"sm\",\n              onClick: () => addOption(qIndex),\n              className: \"mt-2\",\n              children: \"Add Option\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 15\n        }, this)]\n      }, qIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          onClick: addQuestion,\n          children: \"Add Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          disabled: saving,\n          children: saving ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Spinner, {\n              as: \"span\",\n              animation: \"border\",\n              size: \"sm\",\n              role: \"status\",\n              \"aria-hidden\": \"true\",\n              className: \"me-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this), \"Saving...\"]\n          }, void 0, true) : id ? \"Update Assessment\" : \"Create Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(AssessmentEditPage, \"X767BjQ3j3TX346OopH2Hey08TE=\", false, function () {\n  return [useParams, useNavigate, useAuth];\n});\n_c = AssessmentEditPage;\nexport default AssessmentEditPage;\nvar _c;\n$RefreshReg$(_c, \"AssessmentEditPage\");","map":{"version":3,"names":["useState","useEffect","Container","Row","Col","Card","Button","Form","Alert","Spinner","useParams","useNavigate","assessmentService","courseService","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","AssessmentEditPage","_s","id","navigate","user","loading","setLoading","saving","setSaving","error","setError","success","setSuccess","courses","setCourses","assessmentForm","setAssessmentForm","title","courseId","maxScore","questions","role","fetchData","coursesResponse","getInstructorCourses","data","fetchAssessmentData","console","response","getAssessmentById","assessmentData","JSON","parse","e","Array","isArray","map","q","index","text","questionText","options","opt","optIndex","optionText","correctOption","points","handleInputChange","name","value","target","updateQuestion","field","updatedQuestions","optionIndex","optionValue","addQuestion","length","removeQuestion","splice","reindexedQuestions","idx","addOption","questionIndex","optionLetters","nextOptionIndex","push","removeOption","_updatedQuestions$que","handleSubmit","preventDefault","trim","i","j","formattedAssessment","parseInt","stringify","updateAssessment","createAssessment","assessmentId","className","children","animation","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","onSubmit","Header","Body","md","Group","Label","Control","type","onChange","placeholder","required","min","max","Select","course","question","qIndex","size","as","rows","style","width","option","oIndex","Check","checked","disabled","_c","$RefreshReg$"],"sources":["E:/project-capg/frontend/src/pages/AssessmentEditPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner } from \"react-bootstrap\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { assessmentService, courseService } from \"../services/api\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nconst AssessmentEditPage = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [courses, setCourses] = useState([]);\r\n  const [assessmentForm, setAssessmentForm] = useState({\r\n    title: \"\",\r\n    courseId: \"\",\r\n    maxScore: 100,\r\n    questions: []\r\n  });\r\n\r\n  // Fetch assessment data and courses on component mount\r\n  useEffect(() => {\r\n    // Only instructors should access this page\r\n    if (user && user.role !== \"Instructor\") {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch courses for dropdown\r\n        const coursesResponse = await courseService.getInstructorCourses();\r\n        setCourses(coursesResponse.data || []);\r\n\r\n        // Fetch assessment if editing\r\n        if (id) {\r\n          await fetchAssessmentData();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setError(\"Failed to load data. Please try again.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [id, user]);\r\n\r\n  const fetchAssessmentData = async () => {\r\n    try {\r\n      const response = await assessmentService.getAssessmentById(id);\r\n      \r\n      if (response.data) {\r\n        const assessmentData = response.data;\r\n        \r\n        // Parse questions if they're stored as a JSON string\r\n        let questions = [];\r\n        if (typeof assessmentData.questions === 'string') {\r\n          try {\r\n            questions = JSON.parse(assessmentData.questions);\r\n          } catch (e) {\r\n            console.error(\"Error parsing questions:\", e);\r\n            questions = [];\r\n          }\r\n        } else if (Array.isArray(assessmentData.questions)) {\r\n          questions = assessmentData.questions;\r\n        }\r\n        \r\n        // Format questions to ensure they have the correct structure\r\n        questions = questions.map((q, index) => {\r\n          return {\r\n            id: q.id || `q${index + 1}`,\r\n            text: q.text || q.questionText || `Question ${index + 1}`,\r\n            options: (q.options || []).map((opt, optIndex) => {\r\n              if (typeof opt === 'string') {\r\n                return { id: `opt${optIndex}`, text: opt };\r\n              }\r\n              return {\r\n                id: opt.id || `opt${optIndex}`,\r\n                text: opt.text || opt.optionText || `Option ${optIndex + 1}`\r\n              };\r\n            }),\r\n            correctOption: q.correctOption || \"\",\r\n            points: q.points || 1\r\n          };\r\n        });\r\n        \r\n        setAssessmentForm({\r\n          title: assessmentData.title || \"\",\r\n          courseId: assessmentData.courseId || \"\",\r\n          maxScore: assessmentData.maxScore || 100,\r\n          questions: questions\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching assessment:\", error);\r\n      setError(\"Failed to load assessment. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const updateQuestion = (index, field, value) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    \r\n    if (field === \"option\") {\r\n      // Update option text\r\n      const [optionIndex, optionValue] = value;\r\n      updatedQuestions[index].options[optionIndex].text = optionValue;\r\n    } else if (field === \"optionId\") {\r\n      // Update option ID\r\n      const [optionIndex, optionValue] = value;\r\n      updatedQuestions[index].options[optionIndex].id = optionValue;\r\n    } else {\r\n      // Update other question fields\r\n      updatedQuestions[index][field] = value;\r\n    }\r\n    \r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: updatedQuestions\r\n    });\r\n  };\r\n\r\n  const addQuestion = () => {\r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: [\r\n        ...assessmentForm.questions,\r\n        {\r\n          id: `q${assessmentForm.questions.length + 1}`,\r\n          text: \"\",\r\n          options: [\r\n            { id: \"a\", text: \"\" },\r\n            { id: \"b\", text: \"\" },\r\n            { id: \"c\", text: \"\" },\r\n            { id: \"d\", text: \"\" }\r\n          ],\r\n          correctOption: \"a\",\r\n          points: 1\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  const removeQuestion = (index) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    updatedQuestions.splice(index, 1);\r\n    \r\n    // Update IDs to ensure they're sequential\r\n    const reindexedQuestions = updatedQuestions.map((q, idx) => ({\r\n      ...q,\r\n      id: `q${idx + 1}`\r\n    }));\r\n    \r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: reindexedQuestions\r\n    });\r\n  };\r\n\r\n  const addOption = (questionIndex) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    const optionLetters = \"abcdefghijklmnopqrstuvwxyz\";\r\n    const nextOptionIndex = updatedQuestions[questionIndex].options.length;\r\n    \r\n    if (nextOptionIndex < optionLetters.length) {\r\n      updatedQuestions[questionIndex].options.push({\r\n        id: optionLetters[nextOptionIndex],\r\n        text: \"\"\r\n      });\r\n      \r\n      setAssessmentForm({\r\n        ...assessmentForm,\r\n        questions: updatedQuestions\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeOption = (questionIndex, optionIndex) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    \r\n    // Ensure we keep at least 2 options\r\n    if (updatedQuestions[questionIndex].options.length > 2) {\r\n      updatedQuestions[questionIndex].options.splice(optionIndex, 1);\r\n      \r\n      // If the removed option was the correct one, set the first option as correct\r\n      if (updatedQuestions[questionIndex].correctOption === updatedQuestions[questionIndex].options[optionIndex]?.id) {\r\n        updatedQuestions[questionIndex].correctOption = updatedQuestions[questionIndex].options[0].id;\r\n      }\r\n      \r\n      setAssessmentForm({\r\n        ...assessmentForm,\r\n        questions: updatedQuestions\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      setSaving(true);\r\n      setError(null);\r\n      setSuccess(null);\r\n      \r\n      // Validate form\r\n      if (!assessmentForm.title.trim()) {\r\n        setError(\"Assessment title is required\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      if (!assessmentForm.courseId) {\r\n        setError(\"Please select a course\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      if (assessmentForm.questions.length === 0) {\r\n        setError(\"At least one question is required\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      // Validate questions\r\n      for (let i = 0; i < assessmentForm.questions.length; i++) {\r\n        const q = assessmentForm.questions[i];\r\n        \r\n        if (!q.text.trim()) {\r\n          setError(`Question ${i + 1} text is required`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n        \r\n        if (q.options.length < 2) {\r\n          setError(`Question ${i + 1} must have at least 2 options`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n        \r\n        for (let j = 0; j < q.options.length; j++) {\r\n          if (!q.options[j].text.trim()) {\r\n            setError(`Option ${j + 1} in Question ${i + 1} is required`);\r\n            setSaving(false);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        if (!q.correctOption) {\r\n          setError(`Please select a correct answer for Question ${i + 1}`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Format assessment data for submission\r\n      const formattedAssessment = {\r\n        title: assessmentForm.title,\r\n        courseId: assessmentForm.courseId,\r\n        maxScore: parseInt(assessmentForm.maxScore),\r\n        questions: JSON.stringify(assessmentForm.questions)\r\n      };\r\n      \r\n      let response;\r\n      if (id) {\r\n        // Update existing assessment\r\n        response = await assessmentService.updateAssessment(id, formattedAssessment);\r\n        setSuccess(\"Assessment updated successfully!\");\r\n      } else {\r\n        // Create new assessment\r\n        response = await assessmentService.createAssessment(formattedAssessment);\r\n        setSuccess(\"Assessment created successfully!\");\r\n        \r\n        // Navigate to the edit page with the new ID\r\n        if (response.data && response.data.assessmentId) {\r\n          navigate(`/assessment/edit/${response.data.assessmentId}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving assessment:\", error);\r\n      setError(\"Failed to save assessment. Please try again.\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container className=\"py-5 text-center\">\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container className=\"py-4\">\r\n      <div className=\"mb-4\">\r\n        <Button \r\n          variant=\"outline-secondary\" \r\n          onClick={() => navigate('/assessment-management')}\r\n        >\r\n          ← Back to Assessment Management\r\n        </Button>\r\n      </div>\r\n      \r\n      <h2 className=\"mb-4\">{id ? \"Edit Assessment\" : \"Create Assessment\"}</h2>\r\n      \r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {success && <Alert variant=\"success\">{success}</Alert>}\r\n      \r\n      <Form onSubmit={handleSubmit}>\r\n        <Card className=\"mb-4\">\r\n          <Card.Header>\r\n            <h4>Assessment Details</h4>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={6}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Assessment Title</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    value={assessmentForm.title}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Enter assessment title\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={3}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Max Score</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    name=\"maxScore\"\r\n                    min=\"1\"\r\n                    max=\"100\"\r\n                    value={assessmentForm.maxScore}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={3}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Course</Form.Label>\r\n                  <Form.Select\r\n                    name=\"courseId\"\r\n                    value={assessmentForm.courseId}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Course</option>\r\n                    {courses.map((course) => (\r\n                      <option key={course.courseId} value={course.courseId}>\r\n                        {course.title}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n        \r\n        <h4 className=\"mb-3\">Questions</h4>\r\n        \r\n        {assessmentForm.questions.length === 0 ? (\r\n          <Alert variant=\"info\">\r\n            No questions added yet. Click \"Add Question\" to start creating your assessment.\r\n          </Alert>\r\n        ) : (\r\n          assessmentForm.questions.map((question, qIndex) => (\r\n            <Card key={qIndex} className=\"mb-4\">\r\n              <Card.Header className=\"d-flex justify-content-between align-items-center\">\r\n                <h5 className=\"mb-0\">Question {qIndex + 1}</h5>\r\n                <Button \r\n                  variant=\"outline-danger\" \r\n                  size=\"sm\" \r\n                  onClick={() => removeQuestion(qIndex)}\r\n                >\r\n                  Remove Question\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Question Text</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={2}\r\n                    value={question.text}\r\n                    onChange={(e) => updateQuestion(qIndex, \"text\", e.target.value)}\r\n                    placeholder=\"Enter question text\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Question ID (for reference)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={question.id}\r\n                    onChange={(e) => updateQuestion(qIndex, \"id\", e.target.value)}\r\n                    placeholder=\"Question ID\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Points</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    value={question.points}\r\n                    onChange={(e) => updateQuestion(qIndex, \"points\", parseInt(e.target.value))}\r\n                    style={{ width: \"100px\" }}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <div className=\"mb-3\">\r\n                  <Form.Label>Options</Form.Label>\r\n                  {question.options.map((option, oIndex) => (\r\n                    <div key={oIndex} className=\"d-flex mb-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"radio\"\r\n                        name={`correct-option-${qIndex}`}\r\n                        checked={question.correctOption === option.id}\r\n                        onChange={() => updateQuestion(qIndex, \"correctOption\", option.id)}\r\n                        className=\"me-2\"\r\n                      />\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        value={option.id}\r\n                        onChange={(e) => updateQuestion(qIndex, \"optionId\", [oIndex, e.target.value])}\r\n                        placeholder=\"ID\"\r\n                        className=\"me-2\"\r\n                        style={{ width: \"80px\" }}\r\n                        required\r\n                      />\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        value={option.text}\r\n                        onChange={(e) => updateQuestion(qIndex, \"option\", [oIndex, e.target.value])}\r\n                        placeholder={`Option ${oIndex + 1}`}\r\n                        className=\"flex-grow-1\"\r\n                        required\r\n                      />\r\n                      {question.options.length > 2 && (\r\n                        <Button \r\n                          variant=\"outline-danger\" \r\n                          size=\"sm\" \r\n                          className=\"ms-2\"\r\n                          onClick={() => removeOption(qIndex, oIndex)}\r\n                        >\r\n                          &times;\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  <Button \r\n                    variant=\"outline-secondary\" \r\n                    size=\"sm\" \r\n                    onClick={() => addOption(qIndex)}\r\n                    className=\"mt-2\"\r\n                  >\r\n                    Add Option\r\n                  </Button>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          ))\r\n        )}\r\n        \r\n        <div className=\"d-flex justify-content-between mb-4\">\r\n          <Button \r\n            variant=\"outline-primary\" \r\n            onClick={addQuestion}\r\n          >\r\n            Add Question\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"primary\" \r\n            type=\"submit\" \r\n            disabled={saving}\r\n          >\r\n            {saving ? (\r\n              <>\r\n                <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" className=\"me-2\" />\r\n                Saving...\r\n              </>\r\n            ) : (\r\n              id ? \"Update Assessment\" : \"Create Assessment\"\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AssessmentEditPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}