{"ast":null,"code":"\"use client\";import _objectSpread from\"E:/project-capg/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createContext,useContext,useState,useEffect}from\"react\";import{authAPI}from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for existing session on app load\nconst token=localStorage.getItem(\"token\");const userData=localStorage.getItem(\"user\");if(token&&userData&&userData!==\"undefined\"){try{const parsedUser=JSON.parse(userData);// Ensure we have all required user properties\nif(!parsedUser.name||parsedUser.name==='User'){// If name is missing or default, try to get it from backend\nrefreshUserData(token,parsedUser);}else{setUser(parsedUser);}// Set default authorization header\nauthAPI.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);}catch(error){console.error(\"Error parsing user data:\",error);localStorage.removeItem(\"token\");localStorage.removeItem(\"user\");}}setLoading(false);},[]);// Function to refresh user data from backend\nconst refreshUserData=async(token,currentUserData)=>{try{// Set the token for the request\nauthAPI.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);// Get fresh user data from backend (you may need to create this endpoint)\nconst response=await authAPI.get(\"/users/profile\");if(response.data){const updatedUserData=_objectSpread(_objectSpread({},currentUserData),{},{name:response.data.name||currentUserData.name,role:response.data.role||currentUserData.role});// Update localStorage and state\nlocalStorage.setItem(\"user\",JSON.stringify(updatedUserData));setUser(updatedUserData);}else{setUser(currentUserData);}}catch(error){console.error(\"Error refreshing user data:\",error);setUser(currentUserData);}};const login=async(email,password)=>{try{const response=await authAPI.post(\"/auth/login\",{email,password});const{token,user:userData}=response.data;// Store in localStorage\nlocalStorage.setItem(\"token\",token);localStorage.setItem(\"user\",JSON.stringify(userData));// Set authorization header\nauthAPI.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);setUser(userData);return{success:true,user:userData};}catch(error){var _error$response,_error$response$data;console.error(\"Login error:\",error);return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||\"Login failed\"};}};const register=async userData=>{try{const response=await authAPI.post(\"/auth/register\",userData);return{success:true,data:response.data};}catch(error){var _error$response2,_error$response2$data;console.error(\"Registration error:\",error);return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||\"Registration failed\"};}};const logout=()=>{localStorage.removeItem(\"token\");localStorage.removeItem(\"user\");delete authAPI.defaults.headers.common[\"Authorization\"];setUser(null);};const value={user,login,register,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["_objectSpread","createContext","useContext","useState","useEffect","authAPI","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","name","refreshUserData","defaults","headers","common","concat","error","console","removeItem","currentUserData","response","get","data","updatedUserData","role","setItem","stringify","login","email","password","post","success","_error$response","_error$response$data","message","register","_error$response2","_error$response2$data","logout","value","Provider"],"sources":["E:/project-capg/frontend/src/contexts/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect } from \"react\"\nimport { authAPI } from \"../services/api\"\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Check for existing session on app load\n    const token = localStorage.getItem(\"token\")\n    const userData = localStorage.getItem(\"user\")\n\n    if (token && userData && userData !== \"undefined\") {\n      try {\n        const parsedUser = JSON.parse(userData)\n        // Ensure we have all required user properties\n        if (!parsedUser.name || parsedUser.name === 'User') {\n          // If name is missing or default, try to get it from backend\n          refreshUserData(token, parsedUser)\n        } else {\n          setUser(parsedUser)\n        }\n        // Set default authorization header\n        authAPI.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      } catch (error) {\n        console.error(\"Error parsing user data:\", error)\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"user\")\n      }\n    }\n    setLoading(false)\n  }, [])\n\n  // Function to refresh user data from backend\n  const refreshUserData = async (token, currentUserData) => {\n    try {\n      // Set the token for the request\n      authAPI.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      \n      // Get fresh user data from backend (you may need to create this endpoint)\n      const response = await authAPI.get(\"/users/profile\")\n      \n      if (response.data) {\n        const updatedUserData = {\n          ...currentUserData,\n          name: response.data.name || currentUserData.name,\n          role: response.data.role || currentUserData.role\n        }\n        \n        // Update localStorage and state\n        localStorage.setItem(\"user\", JSON.stringify(updatedUserData))\n        setUser(updatedUserData)\n      } else {\n        setUser(currentUserData)\n      }\n    } catch (error) {\n      console.error(\"Error refreshing user data:\", error)\n      setUser(currentUserData)\n    }\n  }\n\n  const login = async (email, password) => {\n    try {\n      const response = await authAPI.post(\"/auth/login\", { email, password })\n      const { token, user: userData } = response.data\n\n      // Store in localStorage\n      localStorage.setItem(\"token\", token)\n      localStorage.setItem(\"user\", JSON.stringify(userData))\n\n      // Set authorization header\n      authAPI.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n\n      setUser(userData)\n      return { success: true, user: userData }\n    } catch (error) {\n      console.error(\"Login error:\", error)\n      return {\n        success: false,\n        error: error.response?.data?.message || \"Login failed\",\n      }\n    }\n  }\n\n  const register = async (userData) => {\n    try {\n      const response = await authAPI.post(\"/auth/register\", userData)\n      return { success: true, data: response.data }\n    } catch (error) {\n      console.error(\"Registration error:\", error)\n      return {\n        success: false,\n        error: error.response?.data?.message || \"Registration failed\",\n      }\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user\")\n    delete authAPI.defaults.headers.common[\"Authorization\"]\n    setUser(null)\n  }\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}