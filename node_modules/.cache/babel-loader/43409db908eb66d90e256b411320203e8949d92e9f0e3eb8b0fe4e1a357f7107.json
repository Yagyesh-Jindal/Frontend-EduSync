{"ast":null,"code":"\"use client\";import{useState,useEffect}from\"react\";import{Container,Row,Col,Card,Button,Form,Alert,Spinner,ProgressBar}from\"react-bootstrap\";import{useParams,useNavigate,useLocation}from\"react-router-dom\";import{assessmentService,courseService}from\"../services/api\";import{useAuth}from\"../contexts/AuthContext\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AssessmentPage=()=>{var _questions$currentQue,_questions$currentQue2;const{id}=useParams();const navigate=useNavigate();const location=useLocation();const{user}=useAuth();const[assessment,setAssessment]=useState(null);const[course,setCourse]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(\"\");const[answers,setAnswers]=useState([]);const[currentQuestion,setCurrentQuestion]=useState(0);const[submitting,setSubmitting]=useState(false);const[submitted,setSubmitted]=useState(false);const[result,setResult]=useState(null);const[questions,setQuestions]=useState([]);const[viewMode,setViewMode]=useState(false);useEffect(()=>{if(id&&id!=='undefined'){// Check if user is an instructor - if so, redirect to edit page\nif(user&&user.role==='Instructor'){// Only redirect if not explicitly viewing in preview mode\nconst searchParams=new URLSearchParams(location.search);if(searchParams.get('mode')!=='preview'){navigate(\"/assessment/edit/\".concat(id));return;}setViewMode(true);}fetchAssessment();}else{setError(\"Invalid assessment ID\");setLoading(false);}},[id,user,location.search,navigate]);const fetchAssessment=async()=>{try{setLoading(true);const response=await assessmentService.getAssessmentById(id);const assessmentData=response.data;setAssessment(assessmentData);// Parse questions from JSON if needed\nlet parsedQuestions=[];if(assessmentData.questions){try{if(typeof assessmentData.questions==='string'){parsedQuestions=JSON.parse(assessmentData.questions);}else{parsedQuestions=assessmentData.questions;}// Validate and normalize question structure\nparsedQuestions=parsedQuestions.map((q,index)=>{// Ensure each question has an id\nif(!q.id){q.id=\"question-\".concat(index);}// Ensure text is a string\nif(typeof q.text!=='string'){q.text=\"Question \".concat(index+1);}// Ensure options is an array of strings\nif(!Array.isArray(q.options)){q.options=['Option 1','Option 2','Option 3','Option 4'];}else{q.options=q.options.map((opt,i)=>typeof opt==='string'?opt:\"Option \".concat(i+1));}return q;});console.log(\"Parsed and normalized questions:\",parsedQuestions);}catch(err){console.error(\"Error parsing questions:\",err);parsedQuestions=[];}}setQuestions(parsedQuestions);// Initialize answers array\nconst initialAnswers=new Array(parsedQuestions.length).fill(null);setAnswers(initialAnswers);// Fetch course information\nif(assessmentData.courseId){const courseResponse=await courseService.getCourseById(assessmentData.courseId);setCourse(courseResponse.data);}}catch(err){console.error(\"Error fetching assessment:\",err);setError(\"Failed to load assessment. Please try again later.\");}finally{setLoading(false);}};const handleAnswerSelect=(questionIndex,answerIndex)=>{const newAnswers=[...answers];newAnswers[questionIndex]=answerIndex;setAnswers(newAnswers);};const handleSubmit=async()=>{// Check if all questions are answered\nif(answers.some(answer=>answer===null)){setError(\"Please answer all questions before submitting.\");return;}try{setSubmitting(true);setError(\"\");// Create a proper answer object with question IDs as keys and selected option indices as values\nconst formattedAnswers={};questions.forEach((question,index)=>{// Make sure we're using the question ID as the key and converting the answer to a string\nif(question&&question.id){formattedAnswers[question.id]=String(answers[index]);}else{// Fallback if question doesn't have an ID\nformattedAnswers[\"question-\".concat(index)]=String(answers[index]);}});console.log(\"Submitting answers:\",formattedAnswers);const response=await assessmentService.submitAssessment(id,formattedAnswers);setResult(response.data);setSubmitted(true);}catch(err){console.error(\"Error submitting assessment:\",err);setError(\"Failed to submit your answers. Please try again.\");}finally{setSubmitting(false);}};const navigateToNextQuestion=()=>{if(currentQuestion<questions.length-1){setCurrentQuestion(currentQuestion+1);}};const navigateToPreviousQuestion=()=>{if(currentQuestion>0){setCurrentQuestion(currentQuestion-1);}};if(loading){return/*#__PURE__*/_jsxs(Container,{className:\"py-5 text-center\",children:[/*#__PURE__*/_jsx(Spinner,{animation:\"border\",variant:\"primary\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-3\",children:\"Loading assessment...\"})]});}if(!assessment||!questions||questions.length===0){return/*#__PURE__*/_jsxs(Container,{className:\"py-5 text-center\",children:[/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:\"Assessment not found or has no questions.\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:()=>navigate(-1),className:\"mt-3\",children:\"Go Back\"})]});}// Results screen after submission\nif(submitted&&result){return/*#__PURE__*/_jsx(Container,{className:\"py-4\",children:/*#__PURE__*/_jsx(Card,{className:\"shadow-sm border-0 mb-4\",children:/*#__PURE__*/_jsxs(Card.Body,{className:\"p-4 text-center\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Assessment Completed!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"lead mb-4\",children:\"Thank you for completing the assessment.\"}),/*#__PURE__*/_jsx(Row,{className:\"justify-content-center mb-4\",children:/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsx(Card,{className:\"bg-light border-0\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"mb-3\",children:\"Your Score\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"display-4 mb-3\",children:[result.score,\" / \",assessment.maxScore]}),/*#__PURE__*/_jsx(ProgressBar,{now:result.score/assessment.maxScore*100,variant:result.score/assessment.maxScore>=0.7?\"success\":result.score/assessment.maxScore>=0.4?\"warning\":\"danger\",className:\"mb-3\"}),/*#__PURE__*/_jsx(\"p\",{children:result.score/assessment.maxScore>=0.7?\"Excellent work!\":result.score/assessment.maxScore>=0.4?\"Good effort!\":\"Keep studying!\"})]})})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-center gap-3\",children:[course&&/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:()=>navigate(\"/course/\".concat(course.courseId)),children:\"Return to Course\"}),/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",onClick:()=>navigate(user.role===\"Student\"?\"/student-dashboard\":\"/instructor-dashboard\"),children:\"Go to Dashboard\"})]})]})})});}// Assessment taking interface\nreturn/*#__PURE__*/_jsxs(Container,{className:\"py-4\",children:[viewMode&&/*#__PURE__*/_jsx(\"div\",{className:\"mb-4\",children:/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",onClick:()=>navigate('/assessment-management'),children:\"\\u2190 Back to Assessment Management\"})}),/*#__PURE__*/_jsx(Card,{className:\"shadow-sm border-0 mb-4\",children:/*#__PURE__*/_jsxs(Card.Body,{className:\"p-4\",children:[/*#__PURE__*/_jsx(\"h2\",{children:assessment.title}),course&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-muted\",children:[\"Course: \",course.title]}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between align-items-center mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"span\",{className:\"badge bg-primary me-2\",children:[questions.length,\" Questions\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"badge bg-secondary\",children:[\"Max Score: \",assessment.maxScore]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Question \",currentQuestion+1,\" of \",questions.length]})]}),error&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",className:\"mb-4\",children:error}),/*#__PURE__*/_jsx(ProgressBar,{now:currentQuestion/questions.length*100,className:\"mb-4\"}),/*#__PURE__*/_jsx(Card,{className:\"mb-4 border-0 shadow-sm\",children:/*#__PURE__*/_jsxs(Card.Body,{className:\"p-4\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"mb-4\",children:questions[currentQuestion]&&typeof questions[currentQuestion].text==='string'?questions[currentQuestion].text:\"Question \".concat(currentQuestion+1)}),/*#__PURE__*/_jsx(Form,{children:(_questions$currentQue=questions[currentQuestion])===null||_questions$currentQue===void 0?void 0:(_questions$currentQue2=_questions$currentQue.options)===null||_questions$currentQue2===void 0?void 0:_questions$currentQue2.map((option,index)=>/*#__PURE__*/_jsx(Form.Check,{type:\"radio\",id:\"option-\".concat(index),name:\"question-\".concat(currentQuestion),label:typeof option==='string'?option:\"Option \".concat(index+1),checked:answers[currentQuestion]===index,onChange:()=>handleAnswerSelect(currentQuestion,index),className:\"mb-3\"},index))})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between\",children:[/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",onClick:navigateToPreviousQuestion,disabled:currentQuestion===0,children:\"Previous\"}),currentQuestion<questions.length-1?/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:navigateToNextQuestion,children:\"Next\"}):/*#__PURE__*/_jsx(Button,{variant:\"success\",onClick:handleSubmit,disabled:submitting,children:submitting?\"Submitting...\":\"Submit Assessment\"})]})]})}),/*#__PURE__*/_jsx(Card,{className:\"shadow-sm border-0\",children:/*#__PURE__*/_jsxs(Card.Body,{className:\"p-4\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-3\",children:\"Question Navigation\"}),/*#__PURE__*/_jsx(\"div\",{className:\"d-flex flex-wrap gap-2\",children:answers.map((answer,index)=>/*#__PURE__*/_jsx(Button,{variant:currentQuestion===index?\"primary\":answer!==null?\"success\":\"outline-secondary\",size:\"sm\",onClick:()=>setCurrentQuestion(index),children:index+1},index))})]})})]});};export default AssessmentPage;","map":{"version":3,"names":["useState","useEffect","Container","Row","Col","Card","Button","Form","Alert","Spinner","ProgressBar","useParams","useNavigate","useLocation","assessmentService","courseService","useAuth","jsx","_jsx","jsxs","_jsxs","AssessmentPage","_questions$currentQue","_questions$currentQue2","id","navigate","location","user","assessment","setAssessment","course","setCourse","loading","setLoading","error","setError","answers","setAnswers","currentQuestion","setCurrentQuestion","submitting","setSubmitting","submitted","setSubmitted","result","setResult","questions","setQuestions","viewMode","setViewMode","role","searchParams","URLSearchParams","search","get","concat","fetchAssessment","response","getAssessmentById","assessmentData","data","parsedQuestions","JSON","parse","map","q","index","text","Array","isArray","options","opt","i","console","log","err","initialAnswers","length","fill","courseId","courseResponse","getCourseById","handleAnswerSelect","questionIndex","answerIndex","newAnswers","handleSubmit","some","answer","formattedAnswers","forEach","question","String","submitAssessment","navigateToNextQuestion","navigateToPreviousQuestion","className","children","animation","variant","onClick","Body","md","score","maxScore","now","title","option","Check","type","name","label","checked","onChange","disabled","size"],"sources":["E:/project-capg/frontend/src/pages/AssessmentPage.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner, ProgressBar } from \"react-bootstrap\"\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\"\nimport { assessmentService, courseService } from \"../services/api\"\nimport { useAuth } from \"../contexts/AuthContext\"\n\nconst AssessmentPage = () => {\n  const { id } = useParams()\n  const navigate = useNavigate()\n  const location = useLocation()\n  const { user } = useAuth()\n  const [assessment, setAssessment] = useState(null)\n  const [course, setCourse] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(\"\")\n  const [answers, setAnswers] = useState([])\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [submitting, setSubmitting] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const [result, setResult] = useState(null)\n  const [questions, setQuestions] = useState([])\n  const [viewMode, setViewMode] = useState(false)\n\n  useEffect(() => {\n    if (id && id !== 'undefined') {\n      // Check if user is an instructor - if so, redirect to edit page\n      if (user && user.role === 'Instructor') {\n        // Only redirect if not explicitly viewing in preview mode\n        const searchParams = new URLSearchParams(location.search);\n        if (searchParams.get('mode') !== 'preview') {\n          navigate(`/assessment/edit/${id}`);\n          return;\n        }\n        setViewMode(true);\n      }\n      \n      fetchAssessment();\n    } else {\n      setError(\"Invalid assessment ID\")\n      setLoading(false)\n    }\n  }, [id, user, location.search, navigate])\n\n  const fetchAssessment = async () => {\n    try {\n      setLoading(true);\n      const response = await assessmentService.getAssessmentById(id);\n      const assessmentData = response.data;\n      setAssessment(assessmentData);\n      \n      // Parse questions from JSON if needed\n      let parsedQuestions = [];\n      if (assessmentData.questions) {\n        try {\n          if (typeof assessmentData.questions === 'string') {\n            parsedQuestions = JSON.parse(assessmentData.questions);\n          } else {\n            parsedQuestions = assessmentData.questions;\n          }\n          \n          // Validate and normalize question structure\n          parsedQuestions = parsedQuestions.map((q, index) => {\n            // Ensure each question has an id\n            if (!q.id) {\n              q.id = `question-${index}`;\n            }\n            \n            // Ensure text is a string\n            if (typeof q.text !== 'string') {\n              q.text = `Question ${index + 1}`;\n            }\n            \n            // Ensure options is an array of strings\n            if (!Array.isArray(q.options)) {\n              q.options = ['Option 1', 'Option 2', 'Option 3', 'Option 4'];\n            } else {\n              q.options = q.options.map((opt, i) => \n                typeof opt === 'string' ? opt : `Option ${i + 1}`\n              );\n            }\n            \n            return q;\n          });\n          \n          console.log(\"Parsed and normalized questions:\", parsedQuestions);\n        } catch (err) {\n          console.error(\"Error parsing questions:\", err);\n          parsedQuestions = [];\n        }\n      }\n      \n      setQuestions(parsedQuestions);\n      \n      // Initialize answers array\n      const initialAnswers = new Array(parsedQuestions.length).fill(null);\n      setAnswers(initialAnswers);\n      \n      // Fetch course information\n      if (assessmentData.courseId) {\n        const courseResponse = await courseService.getCourseById(assessmentData.courseId);\n        setCourse(courseResponse.data);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assessment:\", err);\n      setError(\"Failed to load assessment. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const handleAnswerSelect = (questionIndex, answerIndex) => {\n    const newAnswers = [...answers];\n    newAnswers[questionIndex] = answerIndex;\n    setAnswers(newAnswers);\n  }\n\n  const handleSubmit = async () => {\n    // Check if all questions are answered\n    if (answers.some(answer => answer === null)) {\n      setError(\"Please answer all questions before submitting.\");\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError(\"\");\n      \n      // Create a proper answer object with question IDs as keys and selected option indices as values\n      const formattedAnswers = {};\n      questions.forEach((question, index) => {\n        // Make sure we're using the question ID as the key and converting the answer to a string\n        if (question && question.id) {\n          formattedAnswers[question.id] = String(answers[index]);\n        } else {\n          // Fallback if question doesn't have an ID\n          formattedAnswers[`question-${index}`] = String(answers[index]);\n        }\n      });\n      \n      console.log(\"Submitting answers:\", formattedAnswers);\n      const response = await assessmentService.submitAssessment(id, formattedAnswers);\n      setResult(response.data);\n      setSubmitted(true);\n    } catch (err) {\n      console.error(\"Error submitting assessment:\", err);\n      setError(\"Failed to submit your answers. Please try again.\");\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  const navigateToNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  }\n\n  const navigateToPreviousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  }\n\n  if (loading) {\n    return (\n      <Container className=\"py-5 text-center\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n        <p className=\"mt-3\">Loading assessment...</p>\n      </Container>\n    );\n  }\n\n  if (!assessment || !questions || questions.length === 0) {\n    return (\n      <Container className=\"py-5 text-center\">\n        <Alert variant=\"danger\">\n          Assessment not found or has no questions.\n        </Alert>\n        <Button \n          variant=\"primary\" \n          onClick={() => navigate(-1)}\n          className=\"mt-3\"\n        >\n          Go Back\n        </Button>\n      </Container>\n    );\n  }\n\n  // Results screen after submission\n  if (submitted && result) {\n    return (\n      <Container className=\"py-4\">\n        <Card className=\"shadow-sm border-0 mb-4\">\n          <Card.Body className=\"p-4 text-center\">\n            <h2>Assessment Completed!</h2>\n            <p className=\"lead mb-4\">Thank you for completing the assessment.</p>\n            \n            <Row className=\"justify-content-center mb-4\">\n              <Col md={6}>\n                <Card className=\"bg-light border-0\">\n                  <Card.Body>\n                    <h3 className=\"mb-3\">Your Score</h3>\n                    <div className=\"display-4 mb-3\">{result.score} / {assessment.maxScore}</div>\n                    <ProgressBar \n                      now={(result.score / assessment.maxScore) * 100} \n                      variant={\n                        (result.score / assessment.maxScore) >= 0.7 ? \"success\" : \n                        (result.score / assessment.maxScore) >= 0.4 ? \"warning\" : \"danger\"\n                      }\n                      className=\"mb-3\"\n                    />\n                    <p>\n                      {(result.score / assessment.maxScore) >= 0.7 ? \"Excellent work!\" : \n                       (result.score / assessment.maxScore) >= 0.4 ? \"Good effort!\" : \"Keep studying!\"}\n                    </p>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n            \n            <div className=\"d-flex justify-content-center gap-3\">\n              {course && (\n                <Button \n                  variant=\"primary\"\n                  onClick={() => navigate(`/course/${course.courseId}`)}\n                >\n                  Return to Course\n                </Button>\n              )}\n              <Button \n                variant=\"outline-secondary\"\n                onClick={() => navigate(user.role === \"Student\" ? \"/student-dashboard\" : \"/instructor-dashboard\")}\n              >\n                Go to Dashboard\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n\n  // Assessment taking interface\n  return (\n    <Container className=\"py-4\">\n      {viewMode && (\n        <div className=\"mb-4\">\n          <Button \n            variant=\"outline-secondary\" \n            onClick={() => navigate('/assessment-management')}\n          >\n            ← Back to Assessment Management\n          </Button>\n        </div>\n      )}\n      \n      <Card className=\"shadow-sm border-0 mb-4\">\n        <Card.Body className=\"p-4\">\n          <h2>{assessment.title}</h2>\n          {course && (\n            <p className=\"text-muted\">Course: {course.title}</p>\n          )}\n          <div className=\"d-flex justify-content-between align-items-center mb-4\">\n            <div>\n              <span className=\"badge bg-primary me-2\">\n                {questions.length} Questions\n              </span>\n              <span className=\"badge bg-secondary\">\n                Max Score: {assessment.maxScore}\n              </span>\n            </div>\n            <div>\n              Question {currentQuestion + 1} of {questions.length}\n            </div>\n          </div>\n\n          {error && (\n            <Alert variant=\"danger\" className=\"mb-4\">\n              {error}\n            </Alert>\n          )}\n\n          <ProgressBar \n            now={(currentQuestion / questions.length) * 100} \n            className=\"mb-4\"\n          />\n\n          {/* Current Question */}\n          <Card className=\"mb-4 border-0 shadow-sm\">\n            <Card.Body className=\"p-4\">\n              <h4 className=\"mb-4\">\n                {questions[currentQuestion] && typeof questions[currentQuestion].text === 'string' \n                  ? questions[currentQuestion].text \n                  : `Question ${currentQuestion + 1}`}\n              </h4>\n              \n              <Form>\n                {questions[currentQuestion]?.options?.map((option, index) => (\n                  <Form.Check\n                    key={index}\n                    type=\"radio\"\n                    id={`option-${index}`}\n                    name={`question-${currentQuestion}`}\n                    label={typeof option === 'string' ? option : `Option ${index + 1}`}\n                    checked={answers[currentQuestion] === index}\n                    onChange={() => handleAnswerSelect(currentQuestion, index)}\n                    className=\"mb-3\"\n                  />\n                ))}\n              </Form>\n            </Card.Body>\n          </Card>\n\n          {/* Navigation Buttons */}\n          <div className=\"d-flex justify-content-between\">\n            <Button\n              variant=\"outline-secondary\"\n              onClick={navigateToPreviousQuestion}\n              disabled={currentQuestion === 0}\n            >\n              Previous\n            </Button>\n\n            {currentQuestion < questions.length - 1 ? (\n              <Button\n                variant=\"primary\"\n                onClick={navigateToNextQuestion}\n              >\n                Next\n              </Button>\n            ) : (\n              <Button\n                variant=\"success\"\n                onClick={handleSubmit}\n                disabled={submitting}\n              >\n                {submitting ? \"Submitting...\" : \"Submit Assessment\"}\n              </Button>\n            )}\n          </div>\n        </Card.Body>\n      </Card>\n\n      {/* Question Navigation */}\n      <Card className=\"shadow-sm border-0\">\n        <Card.Body className=\"p-4\">\n          <h5 className=\"mb-3\">Question Navigation</h5>\n          <div className=\"d-flex flex-wrap gap-2\">\n            {answers.map((answer, index) => (\n              <Button\n                key={index}\n                variant={\n                  currentQuestion === index\n                    ? \"primary\"\n                    : answer !== null\n                    ? \"success\"\n                    : \"outline-secondary\"\n                }\n                size=\"sm\"\n                onClick={() => setCurrentQuestion(index)}\n              >\n                {index + 1}\n              </Button>\n            ))}\n          </div>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default AssessmentPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}