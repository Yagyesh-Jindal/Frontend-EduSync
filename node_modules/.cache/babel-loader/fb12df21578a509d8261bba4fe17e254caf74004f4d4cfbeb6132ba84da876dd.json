{"ast":null,"code":"import _objectSpread from\"E:/project-capg/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from\"react\";import{Container,Row,Col,Card,Button,Form,Alert,Spinner}from\"react-bootstrap\";import{useParams,useNavigate}from\"react-router-dom\";import{assessmentService,courseService}from\"../services/api\";import{useAuth}from\"../contexts/AuthContext\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AssessmentEditPage=()=>{const{id}=useParams();const navigate=useNavigate();const{user}=useAuth();const[loading,setLoading]=useState(true);const[saving,setSaving]=useState(false);const[error,setError]=useState(null);const[success,setSuccess]=useState(null);const[courses,setCourses]=useState([]);const[assessmentForm,setAssessmentForm]=useState({title:\"\",courseId:\"\",maxScore:100,questions:[]});// Fetch assessment data and courses on component mount\nuseEffect(()=>{// Only instructors should access this page\nif(user&&user.role!==\"Instructor\"){navigate(\"/\");return;}const fetchData=async()=>{try{setLoading(true);// Fetch courses for dropdown\nconst coursesResponse=await courseService.getInstructorCourses();setCourses(coursesResponse.data||[]);// Fetch assessment if editing\nif(id){await fetchAssessmentData();}}catch(error){console.error(\"Error fetching data:\",error);setError(\"Failed to load data. Please try again.\");}finally{setLoading(false);}};fetchData();},[id,user]);const fetchAssessmentData=async()=>{try{const response=await assessmentService.getAssessmentById(id);if(response.data){const assessmentData=response.data;// Parse questions if they're stored as a JSON string\nlet questions=[];if(typeof assessmentData.questions==='string'){try{questions=JSON.parse(assessmentData.questions);}catch(e){console.error(\"Error parsing questions:\",e);questions=[];}}else if(Array.isArray(assessmentData.questions)){questions=assessmentData.questions;}// Format questions to ensure they have the correct structure\nquestions=questions.map((q,index)=>{return{id:q.id||\"q\".concat(index+1),text:q.text||q.questionText||\"Question \".concat(index+1),options:(q.options||[]).map((opt,optIndex)=>{if(typeof opt==='string'){return{id:\"opt\".concat(optIndex),text:opt};}return{id:opt.id||\"opt\".concat(optIndex),text:opt.text||opt.optionText||\"Option \".concat(optIndex+1)};}),correctOption:q.correctOption||\"\",points:q.points||1};});setAssessmentForm({title:assessmentData.title||\"\",courseId:assessmentData.courseId||\"\",maxScore:assessmentData.maxScore||100,questions:questions});}}catch(error){console.error(\"Error fetching assessment:\",error);setError(\"Failed to load assessment. Please try again.\");}};const handleInputChange=e=>{const{name,value}=e.target;setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{[name]:value}));};const updateQuestion=(index,field,value)=>{const updatedQuestions=[...assessmentForm.questions];if(field===\"option\"){// Update option text\nconst[optionIndex,optionValue]=value;updatedQuestions[index].options[optionIndex].text=optionValue;}else if(field===\"optionId\"){// Update option ID\nconst[optionIndex,optionValue]=value;updatedQuestions[index].options[optionIndex].id=optionValue;}else{// Update other question fields\nupdatedQuestions[index][field]=value;}setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{questions:updatedQuestions}));};const addQuestion=()=>{setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{questions:[...assessmentForm.questions,{id:\"q\".concat(assessmentForm.questions.length+1),text:\"\",options:[{id:\"a\",text:\"\"},{id:\"b\",text:\"\"},{id:\"c\",text:\"\"},{id:\"d\",text:\"\"}],correctOption:\"a\",points:1}]}));};const removeQuestion=index=>{const updatedQuestions=[...assessmentForm.questions];updatedQuestions.splice(index,1);// Update IDs to ensure they're sequential\nconst reindexedQuestions=updatedQuestions.map((q,idx)=>_objectSpread(_objectSpread({},q),{},{id:\"q\".concat(idx+1)}));setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{questions:reindexedQuestions}));};const addOption=questionIndex=>{const updatedQuestions=[...assessmentForm.questions];const optionLetters=\"abcdefghijklmnopqrstuvwxyz\";const nextOptionIndex=updatedQuestions[questionIndex].options.length;if(nextOptionIndex<optionLetters.length){updatedQuestions[questionIndex].options.push({id:optionLetters[nextOptionIndex],text:\"\"});setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{questions:updatedQuestions}));}};const removeOption=(questionIndex,optionIndex)=>{const updatedQuestions=[...assessmentForm.questions];// Ensure we keep at least 2 options\nif(updatedQuestions[questionIndex].options.length>2){var _updatedQuestions$que;updatedQuestions[questionIndex].options.splice(optionIndex,1);// If the removed option was the correct one, set the first option as correct\nif(updatedQuestions[questionIndex].correctOption===((_updatedQuestions$que=updatedQuestions[questionIndex].options[optionIndex])===null||_updatedQuestions$que===void 0?void 0:_updatedQuestions$que.id)){updatedQuestions[questionIndex].correctOption=updatedQuestions[questionIndex].options[0].id;}setAssessmentForm(_objectSpread(_objectSpread({},assessmentForm),{},{questions:updatedQuestions}));}};const handleSubmit=async e=>{e.preventDefault();try{setSaving(true);setError(null);setSuccess(null);// Validate form\nif(!assessmentForm.title.trim()){setError(\"Assessment title is required\");setSaving(false);return;}if(!assessmentForm.courseId){setError(\"Please select a course\");setSaving(false);return;}if(assessmentForm.questions.length===0){setError(\"At least one question is required\");setSaving(false);return;}// Validate questions\nfor(let i=0;i<assessmentForm.questions.length;i++){const q=assessmentForm.questions[i];if(!q.text.trim()){setError(\"Question \".concat(i+1,\" text is required\"));setSaving(false);return;}if(q.options.length<2){setError(\"Question \".concat(i+1,\" must have at least 2 options\"));setSaving(false);return;}for(let j=0;j<q.options.length;j++){if(!q.options[j].text.trim()){setError(\"Option \".concat(j+1,\" in Question \").concat(i+1,\" is required\"));setSaving(false);return;}}if(!q.correctOption){setError(\"Please select a correct answer for Question \".concat(i+1));setSaving(false);return;}}// Format assessment data for submission\nconst formattedAssessment={title:assessmentForm.title,courseId:assessmentForm.courseId,maxScore:parseInt(assessmentForm.maxScore),questions:JSON.stringify(assessmentForm.questions)};let response;if(id){// Update existing assessment\nresponse=await assessmentService.updateAssessment(id,formattedAssessment);setSuccess(\"Assessment updated successfully!\");}else{// Create new assessment\nresponse=await assessmentService.createAssessment(formattedAssessment);setSuccess(\"Assessment created successfully!\");// Navigate to the edit page with the new ID\nif(response.data&&response.data.assessmentId){navigate(\"/assessment/edit/\".concat(response.data.assessmentId));}}}catch(error){console.error(\"Error saving assessment:\",error);setError(\"Failed to save assessment. Please try again.\");}finally{setSaving(false);}};if(loading){return/*#__PURE__*/_jsx(Container,{className:\"py-5 text-center\",children:/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})})});}return/*#__PURE__*/_jsxs(Container,{className:\"py-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mb-4\",children:/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",onClick:()=>navigate('/assessment-management'),children:\"\\u2190 Back to Assessment Management\"})}),/*#__PURE__*/_jsx(\"h2\",{className:\"mb-4\",children:id?\"Edit Assessment\":\"Create Assessment\"}),error&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:error}),success&&/*#__PURE__*/_jsx(Alert,{variant:\"success\",children:success}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Card,{className:\"mb-4\",children:[/*#__PURE__*/_jsx(Card.Header,{children:/*#__PURE__*/_jsx(\"h4\",{children:\"Assessment Details\"})}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Assessment Title\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",name:\"title\",value:assessmentForm.title,onChange:handleInputChange,placeholder:\"Enter assessment title\",required:true})]})}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Max Score\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"number\",name:\"maxScore\",min:\"1\",max:\"100\",value:assessmentForm.maxScore,onChange:handleInputChange,required:true})]})}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Course\"}),/*#__PURE__*/_jsxs(Form.Select,{name:\"courseId\",value:assessmentForm.courseId,onChange:handleInputChange,required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Course\"}),courses.map(course=>/*#__PURE__*/_jsx(\"option\",{value:course.courseId,children:course.title},course.courseId))]})]})})]})})]}),/*#__PURE__*/_jsx(\"h4\",{className:\"mb-3\",children:\"Questions\"}),assessmentForm.questions.length===0?/*#__PURE__*/_jsx(Alert,{variant:\"info\",children:\"No questions added yet. Click \\\"Add Question\\\" to start creating your assessment.\"}):assessmentForm.questions.map((question,qIndex)=>/*#__PURE__*/_jsxs(Card,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(Card.Header,{className:\"d-flex justify-content-between align-items-center\",children:[/*#__PURE__*/_jsxs(\"h5\",{className:\"mb-0\",children:[\"Question \",qIndex+1]}),/*#__PURE__*/_jsx(Button,{variant:\"outline-danger\",size:\"sm\",onClick:()=>removeQuestion(qIndex),children:\"Remove Question\"})]}),/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Question Text\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",rows:2,value:question.text,onChange:e=>updateQuestion(qIndex,\"text\",e.target.value),placeholder:\"Enter question text\",required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Question ID (for reference)\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:question.id,onChange:e=>updateQuestion(qIndex,\"id\",e.target.value),placeholder:\"Question ID\",required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Points\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"number\",min:\"1\",value:question.points,onChange:e=>updateQuestion(qIndex,\"points\",parseInt(e.target.value)),style:{width:\"100px\"},required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Options\"}),question.options.map((option,oIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex mb-2 align-items-center\",children:[/*#__PURE__*/_jsx(Form.Check,{type:\"radio\",name:\"correct-option-\".concat(qIndex),checked:question.correctOption===option.id,onChange:()=>updateQuestion(qIndex,\"correctOption\",option.id),className:\"me-2\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:option.id,onChange:e=>updateQuestion(qIndex,\"optionId\",[oIndex,e.target.value]),placeholder:\"ID\",className:\"me-2\",style:{width:\"80px\"},required:true}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:option.text,onChange:e=>updateQuestion(qIndex,\"option\",[oIndex,e.target.value]),placeholder:\"Option \".concat(oIndex+1),className:\"flex-grow-1\",required:true}),question.options.length>2&&/*#__PURE__*/_jsx(Button,{variant:\"outline-danger\",size:\"sm\",className:\"ms-2\",onClick:()=>removeOption(qIndex,oIndex),children:\"\\xD7\"})]},oIndex)),/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",size:\"sm\",onClick:()=>addOption(qIndex),className:\"mt-2\",children:\"Add Option\"})]})]})]},qIndex)),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between mb-4\",children:[/*#__PURE__*/_jsx(Button,{variant:\"outline-primary\",onClick:addQuestion,children:\"Add Question\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:saving,children:saving?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\",className:\"me-2\"}),\"Saving...\"]}):id?\"Update Assessment\":\"Create Assessment\"})]})]})]});};export default AssessmentEditPage;","map":{"version":3,"names":["useState","useEffect","Container","Row","Col","Card","Button","Form","Alert","Spinner","useParams","useNavigate","assessmentService","courseService","useAuth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AssessmentEditPage","id","navigate","user","loading","setLoading","saving","setSaving","error","setError","success","setSuccess","courses","setCourses","assessmentForm","setAssessmentForm","title","courseId","maxScore","questions","role","fetchData","coursesResponse","getInstructorCourses","data","fetchAssessmentData","console","response","getAssessmentById","assessmentData","JSON","parse","e","Array","isArray","map","q","index","concat","text","questionText","options","opt","optIndex","optionText","correctOption","points","handleInputChange","name","value","target","_objectSpread","updateQuestion","field","updatedQuestions","optionIndex","optionValue","addQuestion","length","removeQuestion","splice","reindexedQuestions","idx","addOption","questionIndex","optionLetters","nextOptionIndex","push","removeOption","_updatedQuestions$que","handleSubmit","preventDefault","trim","i","j","formattedAssessment","parseInt","stringify","updateAssessment","createAssessment","assessmentId","className","children","animation","variant","onClick","onSubmit","Header","Body","md","Group","Label","Control","type","onChange","placeholder","required","min","max","Select","course","question","qIndex","size","as","rows","style","width","option","oIndex","Check","checked","disabled"],"sources":["E:/project-capg/frontend/src/pages/AssessmentEditPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner } from \"react-bootstrap\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { assessmentService, courseService } from \"../services/api\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nconst AssessmentEditPage = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [courses, setCourses] = useState([]);\r\n  const [assessmentForm, setAssessmentForm] = useState({\r\n    title: \"\",\r\n    courseId: \"\",\r\n    maxScore: 100,\r\n    questions: []\r\n  });\r\n\r\n  // Fetch assessment data and courses on component mount\r\n  useEffect(() => {\r\n    // Only instructors should access this page\r\n    if (user && user.role !== \"Instructor\") {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch courses for dropdown\r\n        const coursesResponse = await courseService.getInstructorCourses();\r\n        setCourses(coursesResponse.data || []);\r\n\r\n        // Fetch assessment if editing\r\n        if (id) {\r\n          await fetchAssessmentData();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setError(\"Failed to load data. Please try again.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [id, user]);\r\n\r\n  const fetchAssessmentData = async () => {\r\n    try {\r\n      const response = await assessmentService.getAssessmentById(id);\r\n      \r\n      if (response.data) {\r\n        const assessmentData = response.data;\r\n        \r\n        // Parse questions if they're stored as a JSON string\r\n        let questions = [];\r\n        if (typeof assessmentData.questions === 'string') {\r\n          try {\r\n            questions = JSON.parse(assessmentData.questions);\r\n          } catch (e) {\r\n            console.error(\"Error parsing questions:\", e);\r\n            questions = [];\r\n          }\r\n        } else if (Array.isArray(assessmentData.questions)) {\r\n          questions = assessmentData.questions;\r\n        }\r\n        \r\n        // Format questions to ensure they have the correct structure\r\n        questions = questions.map((q, index) => {\r\n          return {\r\n            id: q.id || `q${index + 1}`,\r\n            text: q.text || q.questionText || `Question ${index + 1}`,\r\n            options: (q.options || []).map((opt, optIndex) => {\r\n              if (typeof opt === 'string') {\r\n                return { id: `opt${optIndex}`, text: opt };\r\n              }\r\n              return {\r\n                id: opt.id || `opt${optIndex}`,\r\n                text: opt.text || opt.optionText || `Option ${optIndex + 1}`\r\n              };\r\n            }),\r\n            correctOption: q.correctOption || \"\",\r\n            points: q.points || 1\r\n          };\r\n        });\r\n        \r\n        setAssessmentForm({\r\n          title: assessmentData.title || \"\",\r\n          courseId: assessmentData.courseId || \"\",\r\n          maxScore: assessmentData.maxScore || 100,\r\n          questions: questions\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching assessment:\", error);\r\n      setError(\"Failed to load assessment. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const updateQuestion = (index, field, value) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    \r\n    if (field === \"option\") {\r\n      // Update option text\r\n      const [optionIndex, optionValue] = value;\r\n      updatedQuestions[index].options[optionIndex].text = optionValue;\r\n    } else if (field === \"optionId\") {\r\n      // Update option ID\r\n      const [optionIndex, optionValue] = value;\r\n      updatedQuestions[index].options[optionIndex].id = optionValue;\r\n    } else {\r\n      // Update other question fields\r\n      updatedQuestions[index][field] = value;\r\n    }\r\n    \r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: updatedQuestions\r\n    });\r\n  };\r\n\r\n  const addQuestion = () => {\r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: [\r\n        ...assessmentForm.questions,\r\n        {\r\n          id: `q${assessmentForm.questions.length + 1}`,\r\n          text: \"\",\r\n          options: [\r\n            { id: \"a\", text: \"\" },\r\n            { id: \"b\", text: \"\" },\r\n            { id: \"c\", text: \"\" },\r\n            { id: \"d\", text: \"\" }\r\n          ],\r\n          correctOption: \"a\",\r\n          points: 1\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  const removeQuestion = (index) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    updatedQuestions.splice(index, 1);\r\n    \r\n    // Update IDs to ensure they're sequential\r\n    const reindexedQuestions = updatedQuestions.map((q, idx) => ({\r\n      ...q,\r\n      id: `q${idx + 1}`\r\n    }));\r\n    \r\n    setAssessmentForm({\r\n      ...assessmentForm,\r\n      questions: reindexedQuestions\r\n    });\r\n  };\r\n\r\n  const addOption = (questionIndex) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    const optionLetters = \"abcdefghijklmnopqrstuvwxyz\";\r\n    const nextOptionIndex = updatedQuestions[questionIndex].options.length;\r\n    \r\n    if (nextOptionIndex < optionLetters.length) {\r\n      updatedQuestions[questionIndex].options.push({\r\n        id: optionLetters[nextOptionIndex],\r\n        text: \"\"\r\n      });\r\n      \r\n      setAssessmentForm({\r\n        ...assessmentForm,\r\n        questions: updatedQuestions\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeOption = (questionIndex, optionIndex) => {\r\n    const updatedQuestions = [...assessmentForm.questions];\r\n    \r\n    // Ensure we keep at least 2 options\r\n    if (updatedQuestions[questionIndex].options.length > 2) {\r\n      updatedQuestions[questionIndex].options.splice(optionIndex, 1);\r\n      \r\n      // If the removed option was the correct one, set the first option as correct\r\n      if (updatedQuestions[questionIndex].correctOption === updatedQuestions[questionIndex].options[optionIndex]?.id) {\r\n        updatedQuestions[questionIndex].correctOption = updatedQuestions[questionIndex].options[0].id;\r\n      }\r\n      \r\n      setAssessmentForm({\r\n        ...assessmentForm,\r\n        questions: updatedQuestions\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      setSaving(true);\r\n      setError(null);\r\n      setSuccess(null);\r\n      \r\n      // Validate form\r\n      if (!assessmentForm.title.trim()) {\r\n        setError(\"Assessment title is required\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      if (!assessmentForm.courseId) {\r\n        setError(\"Please select a course\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      if (assessmentForm.questions.length === 0) {\r\n        setError(\"At least one question is required\");\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      // Validate questions\r\n      for (let i = 0; i < assessmentForm.questions.length; i++) {\r\n        const q = assessmentForm.questions[i];\r\n        \r\n        if (!q.text.trim()) {\r\n          setError(`Question ${i + 1} text is required`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n        \r\n        if (q.options.length < 2) {\r\n          setError(`Question ${i + 1} must have at least 2 options`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n        \r\n        for (let j = 0; j < q.options.length; j++) {\r\n          if (!q.options[j].text.trim()) {\r\n            setError(`Option ${j + 1} in Question ${i + 1} is required`);\r\n            setSaving(false);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        if (!q.correctOption) {\r\n          setError(`Please select a correct answer for Question ${i + 1}`);\r\n          setSaving(false);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Format assessment data for submission\r\n      const formattedAssessment = {\r\n        title: assessmentForm.title,\r\n        courseId: assessmentForm.courseId,\r\n        maxScore: parseInt(assessmentForm.maxScore),\r\n        questions: JSON.stringify(assessmentForm.questions)\r\n      };\r\n      \r\n      let response;\r\n      if (id) {\r\n        // Update existing assessment\r\n        response = await assessmentService.updateAssessment(id, formattedAssessment);\r\n        setSuccess(\"Assessment updated successfully!\");\r\n      } else {\r\n        // Create new assessment\r\n        response = await assessmentService.createAssessment(formattedAssessment);\r\n        setSuccess(\"Assessment created successfully!\");\r\n        \r\n        // Navigate to the edit page with the new ID\r\n        if (response.data && response.data.assessmentId) {\r\n          navigate(`/assessment/edit/${response.data.assessmentId}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving assessment:\", error);\r\n      setError(\"Failed to save assessment. Please try again.\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container className=\"py-5 text-center\">\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container className=\"py-4\">\r\n      <div className=\"mb-4\">\r\n        <Button \r\n          variant=\"outline-secondary\" \r\n          onClick={() => navigate('/assessment-management')}\r\n        >\r\n          ← Back to Assessment Management\r\n        </Button>\r\n      </div>\r\n      \r\n      <h2 className=\"mb-4\">{id ? \"Edit Assessment\" : \"Create Assessment\"}</h2>\r\n      \r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {success && <Alert variant=\"success\">{success}</Alert>}\r\n      \r\n      <Form onSubmit={handleSubmit}>\r\n        <Card className=\"mb-4\">\r\n          <Card.Header>\r\n            <h4>Assessment Details</h4>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={6}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Assessment Title</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    value={assessmentForm.title}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Enter assessment title\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={3}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Max Score</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    name=\"maxScore\"\r\n                    min=\"1\"\r\n                    max=\"100\"\r\n                    value={assessmentForm.maxScore}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={3}>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Course</Form.Label>\r\n                  <Form.Select\r\n                    name=\"courseId\"\r\n                    value={assessmentForm.courseId}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Course</option>\r\n                    {courses.map((course) => (\r\n                      <option key={course.courseId} value={course.courseId}>\r\n                        {course.title}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n        \r\n        <h4 className=\"mb-3\">Questions</h4>\r\n        \r\n        {assessmentForm.questions.length === 0 ? (\r\n          <Alert variant=\"info\">\r\n            No questions added yet. Click \"Add Question\" to start creating your assessment.\r\n          </Alert>\r\n        ) : (\r\n          assessmentForm.questions.map((question, qIndex) => (\r\n            <Card key={qIndex} className=\"mb-4\">\r\n              <Card.Header className=\"d-flex justify-content-between align-items-center\">\r\n                <h5 className=\"mb-0\">Question {qIndex + 1}</h5>\r\n                <Button \r\n                  variant=\"outline-danger\" \r\n                  size=\"sm\" \r\n                  onClick={() => removeQuestion(qIndex)}\r\n                >\r\n                  Remove Question\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Question Text</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={2}\r\n                    value={question.text}\r\n                    onChange={(e) => updateQuestion(qIndex, \"text\", e.target.value)}\r\n                    placeholder=\"Enter question text\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Question ID (for reference)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={question.id}\r\n                    onChange={(e) => updateQuestion(qIndex, \"id\", e.target.value)}\r\n                    placeholder=\"Question ID\"\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Points</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    value={question.points}\r\n                    onChange={(e) => updateQuestion(qIndex, \"points\", parseInt(e.target.value))}\r\n                    style={{ width: \"100px\" }}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                \r\n                <div className=\"mb-3\">\r\n                  <Form.Label>Options</Form.Label>\r\n                  {question.options.map((option, oIndex) => (\r\n                    <div key={oIndex} className=\"d-flex mb-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"radio\"\r\n                        name={`correct-option-${qIndex}`}\r\n                        checked={question.correctOption === option.id}\r\n                        onChange={() => updateQuestion(qIndex, \"correctOption\", option.id)}\r\n                        className=\"me-2\"\r\n                      />\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        value={option.id}\r\n                        onChange={(e) => updateQuestion(qIndex, \"optionId\", [oIndex, e.target.value])}\r\n                        placeholder=\"ID\"\r\n                        className=\"me-2\"\r\n                        style={{ width: \"80px\" }}\r\n                        required\r\n                      />\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        value={option.text}\r\n                        onChange={(e) => updateQuestion(qIndex, \"option\", [oIndex, e.target.value])}\r\n                        placeholder={`Option ${oIndex + 1}`}\r\n                        className=\"flex-grow-1\"\r\n                        required\r\n                      />\r\n                      {question.options.length > 2 && (\r\n                        <Button \r\n                          variant=\"outline-danger\" \r\n                          size=\"sm\" \r\n                          className=\"ms-2\"\r\n                          onClick={() => removeOption(qIndex, oIndex)}\r\n                        >\r\n                          &times;\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  <Button \r\n                    variant=\"outline-secondary\" \r\n                    size=\"sm\" \r\n                    onClick={() => addOption(qIndex)}\r\n                    className=\"mt-2\"\r\n                  >\r\n                    Add Option\r\n                  </Button>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          ))\r\n        )}\r\n        \r\n        <div className=\"d-flex justify-content-between mb-4\">\r\n          <Button \r\n            variant=\"outline-primary\" \r\n            onClick={addQuestion}\r\n          >\r\n            Add Question\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"primary\" \r\n            type=\"submit\" \r\n            disabled={saving}\r\n          >\r\n            {saving ? (\r\n              <>\r\n                <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" className=\"me-2\" />\r\n                Saving...\r\n              </>\r\n            ) : (\r\n              id ? \"Update Assessment\" : \"Create Assessment\"\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AssessmentEditPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}