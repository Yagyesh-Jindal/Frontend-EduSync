{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"E:\\\\project-capg\\\\frontend\\\\src\\\\pages\\\\AssessmentPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner, ProgressBar } from \"react-bootstrap\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport { assessmentService, courseService } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentPage = () => {\n  _s();\n  var _questions$currentQue, _questions$currentQue2;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  const [assessment, setAssessment] = useState(null);\n  const [course, setCourse] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [submitting, setSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [result, setResult] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [viewMode, setViewMode] = useState(false);\n  useEffect(() => {\n    if (id && id !== 'undefined') {\n      // Check if user is an instructor - if so, redirect to edit page\n      if (user && user.role === 'Instructor') {\n        // Only redirect if not explicitly viewing in preview mode\n        const searchParams = new URLSearchParams(location.search);\n        if (searchParams.get('mode') !== 'preview') {\n          navigate(`/assessment/edit/${id}`);\n          return;\n        }\n        setViewMode(true);\n      }\n      fetchAssessment();\n    } else {\n      setError(\"Invalid assessment ID\");\n      setLoading(false);\n    }\n  }, [id, user, location.search, navigate]);\n  const fetchAssessment = async () => {\n    try {\n      setLoading(true);\n      const response = await assessmentService.getAssessmentById(id);\n      const assessmentData = response.data;\n      setAssessment(assessmentData);\n\n      // Parse questions from JSON if needed\n      let parsedQuestions = [];\n      if (assessmentData.questions) {\n        try {\n          if (typeof assessmentData.questions === 'string') {\n            parsedQuestions = JSON.parse(assessmentData.questions);\n          } else {\n            parsedQuestions = assessmentData.questions;\n          }\n\n          // Validate and normalize question structure\n          parsedQuestions = parsedQuestions.map((q, index) => {\n            // Ensure each question has an id\n            if (!q.id) {\n              q.id = `question-${index}`;\n            }\n\n            // Ensure text is a string\n            if (typeof q.text !== 'string') {\n              q.text = `Question ${index + 1}`;\n            }\n\n            // Ensure options is an array of strings\n            if (!Array.isArray(q.options)) {\n              q.options = ['Option 1', 'Option 2', 'Option 3', 'Option 4'];\n            } else {\n              q.options = q.options.map((opt, i) => typeof opt === 'string' ? opt : `Option ${i + 1}`);\n            }\n            return q;\n          });\n          console.log(\"Parsed and normalized questions:\", parsedQuestions);\n        } catch (err) {\n          console.error(\"Error parsing questions:\", err);\n          parsedQuestions = [];\n        }\n      }\n      setQuestions(parsedQuestions);\n\n      // Initialize answers array\n      const initialAnswers = new Array(parsedQuestions.length).fill(null);\n      setAnswers(initialAnswers);\n\n      // Fetch course information\n      if (assessmentData.courseId) {\n        const courseResponse = await courseService.getCourseById(assessmentData.courseId);\n        setCourse(courseResponse.data);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assessment:\", err);\n      setError(\"Failed to load assessment. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAnswerSelect = (questionIndex, answerIndex) => {\n    const newAnswers = [...answers];\n    newAnswers[questionIndex] = answerIndex;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = async () => {\n    // Check if all questions are answered\n    if (answers.some(answer => answer === null)) {\n      setError(\"Please answer all questions before submitting.\");\n      return;\n    }\n    try {\n      setSubmitting(true);\n      setError(\"\");\n\n      // Create a proper answer object with question IDs as keys and selected option indices as values\n      const formattedAnswers = {};\n      questions.forEach((question, index) => {\n        // Make sure we're using the question ID as the key and converting the answer to a string\n        if (question && question.id) {\n          formattedAnswers[question.id] = String(answers[index]);\n        } else {\n          // Fallback if question doesn't have an ID\n          formattedAnswers[`question-${index}`] = String(answers[index]);\n        }\n      });\n      console.log(\"Submitting answers:\", formattedAnswers);\n      const response = await assessmentService.submitAssessment(id, formattedAnswers);\n      setResult(response.data);\n      setSubmitted(true);\n    } catch (err) {\n      console.error(\"Error submitting assessment:\", err);\n      setError(\"Failed to submit your answers. Please try again.\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  const navigateToNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n  const navigateToPreviousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"py-5 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-3\",\n        children: \"Loading assessment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n  if (!assessment || !questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"py-5 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: \"Assessment not found or has no questions.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => navigate(-1),\n        className: \"mt-3\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Results screen after submission\n  if (submitted && result) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"py-4\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"shadow-sm border-0 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          className: \"p-4 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Assessment Completed!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"lead mb-4\",\n            children: \"Thank you for completing the assessment.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"justify-content-center mb-4\",\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                className: \"bg-light border-0\",\n                children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"mb-3\",\n                    children: \"Your Score\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"display-4 mb-3\",\n                    children: [result.score, \" / \", assessment.maxScore]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n                    now: result.score / assessment.maxScore * 100,\n                    variant: result.score / assessment.maxScore >= 0.7 ? \"success\" : result.score / assessment.maxScore >= 0.4 ? \"warning\" : \"danger\",\n                    className: \"mb-3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: result.score / assessment.maxScore >= 0.7 ? \"Excellent work!\" : result.score / assessment.maxScore >= 0.4 ? \"Good effort!\" : \"Keep studying!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center gap-3\",\n            children: [course && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              onClick: () => navigate(`/course/${course.courseId}`),\n              children: \"Return to Course\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              onClick: () => navigate(user.role === \"Student\" ? \"/student-dashboard\" : \"/instructor-dashboard\"),\n              children: \"Go to Dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Assessment taking interface\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"py-4\",\n    children: [viewMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        onClick: () => navigate('/assessment-management'),\n        children: \"\\u2190 Back to Assessment Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"shadow-sm border-0 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: assessment.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), course && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: [\"Course: \", course.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge bg-primary me-2\",\n              children: [questions.length, \" Questions\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge bg-secondary\",\n              children: [\"Max Score: \", assessment.maxScore]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          className: \"mb-4\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: currentQuestion / questions.length * 100,\n          className: \"mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mb-4 border-0 shadow-sm\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-4\",\n              children: questions[currentQuestion] && typeof questions[currentQuestion].text === 'string' ? questions[currentQuestion].text : `Question ${currentQuestion + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              children: (_questions$currentQue = questions[currentQuestion]) === null || _questions$currentQue === void 0 ? void 0 : (_questions$currentQue2 = _questions$currentQue.options) === null || _questions$currentQue2 === void 0 ? void 0 : _questions$currentQue2.map((option, index) => /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"radio\",\n                id: `option-${index}`,\n                name: `question-${currentQuestion}`,\n                label: typeof option === 'string' ? option : `Option ${index + 1}`,\n                checked: answers[currentQuestion] === index,\n                onChange: () => handleAnswerSelect(currentQuestion, index),\n                className: \"mb-3\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            onClick: navigateToPreviousQuestion,\n            disabled: currentQuestion === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), currentQuestion < questions.length - 1 ? /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: navigateToNextQuestion,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            onClick: handleSubmit,\n            disabled: submitting,\n            children: submitting ? \"Submitting...\" : \"Submit Assessment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"shadow-sm border-0\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-3\",\n          children: \"Question Navigation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-wrap gap-2\",\n          children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(Button, {\n            variant: currentQuestion === index ? \"primary\" : answer !== null ? \"success\" : \"outline-secondary\",\n            size: \"sm\",\n            onClick: () => setCurrentQuestion(index),\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(AssessmentPage, \"05QK29/RzwH0/GAE3JX/dgfVkRo=\", false, function () {\n  return [useParams, useNavigate, useLocation, useAuth];\n});\n_c = AssessmentPage;\nexport default AssessmentPage;\nvar _c;\n$RefreshReg$(_c, \"AssessmentPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","Container","Row","Col","Card","Button","Form","Alert","Spinner","ProgressBar","useParams","useNavigate","useLocation","assessmentService","courseService","useAuth","jsxDEV","_jsxDEV","AssessmentPage","_questions$currentQue","_questions$currentQue2","id","navigate","location","user","assessment","setAssessment","course","setCourse","loading","setLoading","error","setError","answers","setAnswers","currentQuestion","setCurrentQuestion","submitting","setSubmitting","submitted","setSubmitted","result","setResult","questions","setQuestions","viewMode","setViewMode","role","searchParams","URLSearchParams","search","get","fetchAssessment","response","getAssessmentById","assessmentData","data","parsedQuestions","JSON","parse","map","q","index","text","Array","isArray","options","opt","i","console","log","err","initialAnswers","length","fill","courseId","courseResponse","getCourseById","handleAnswerSelect","questionIndex","answerIndex","newAnswers","handleSubmit","some","answer","formattedAnswers","forEach","question","String","submitAssessment","navigateToNextQuestion","navigateToPreviousQuestion","className","children","animation","variant","fileName","lineNumber","columnNumber","onClick","Body","md","score","maxScore","now","title","option","Check","type","name","label","checked","onChange","disabled","size","_c","$RefreshReg$"],"sources":["E:/project-capg/frontend/src/pages/AssessmentPage.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Container, Row, Col, Card, Button, Form, Alert, Spinner, ProgressBar } from \"react-bootstrap\"\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\"\nimport { assessmentService, courseService } from \"../services/api\"\nimport { useAuth } from \"../contexts/AuthContext\"\n\nconst AssessmentPage = () => {\n  const { id } = useParams()\n  const navigate = useNavigate()\n  const location = useLocation()\n  const { user } = useAuth()\n  const [assessment, setAssessment] = useState(null)\n  const [course, setCourse] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(\"\")\n  const [answers, setAnswers] = useState([])\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [submitting, setSubmitting] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const [result, setResult] = useState(null)\n  const [questions, setQuestions] = useState([])\n  const [viewMode, setViewMode] = useState(false)\n\n  useEffect(() => {\n    if (id && id !== 'undefined') {\n      // Check if user is an instructor - if so, redirect to edit page\n      if (user && user.role === 'Instructor') {\n        // Only redirect if not explicitly viewing in preview mode\n        const searchParams = new URLSearchParams(location.search);\n        if (searchParams.get('mode') !== 'preview') {\n          navigate(`/assessment/edit/${id}`);\n          return;\n        }\n        setViewMode(true);\n      }\n      \n      fetchAssessment();\n    } else {\n      setError(\"Invalid assessment ID\")\n      setLoading(false)\n    }\n  }, [id, user, location.search, navigate])\n\n  const fetchAssessment = async () => {\n    try {\n      setLoading(true);\n      const response = await assessmentService.getAssessmentById(id);\n      const assessmentData = response.data;\n      setAssessment(assessmentData);\n      \n      // Parse questions from JSON if needed\n      let parsedQuestions = [];\n      if (assessmentData.questions) {\n        try {\n          if (typeof assessmentData.questions === 'string') {\n            parsedQuestions = JSON.parse(assessmentData.questions);\n          } else {\n            parsedQuestions = assessmentData.questions;\n          }\n          \n          // Validate and normalize question structure\n          parsedQuestions = parsedQuestions.map((q, index) => {\n            // Ensure each question has an id\n            if (!q.id) {\n              q.id = `question-${index}`;\n            }\n            \n            // Ensure text is a string\n            if (typeof q.text !== 'string') {\n              q.text = `Question ${index + 1}`;\n            }\n            \n            // Ensure options is an array of strings\n            if (!Array.isArray(q.options)) {\n              q.options = ['Option 1', 'Option 2', 'Option 3', 'Option 4'];\n            } else {\n              q.options = q.options.map((opt, i) => \n                typeof opt === 'string' ? opt : `Option ${i + 1}`\n              );\n            }\n            \n            return q;\n          });\n          \n          console.log(\"Parsed and normalized questions:\", parsedQuestions);\n        } catch (err) {\n          console.error(\"Error parsing questions:\", err);\n          parsedQuestions = [];\n        }\n      }\n      \n      setQuestions(parsedQuestions);\n      \n      // Initialize answers array\n      const initialAnswers = new Array(parsedQuestions.length).fill(null);\n      setAnswers(initialAnswers);\n      \n      // Fetch course information\n      if (assessmentData.courseId) {\n        const courseResponse = await courseService.getCourseById(assessmentData.courseId);\n        setCourse(courseResponse.data);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assessment:\", err);\n      setError(\"Failed to load assessment. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const handleAnswerSelect = (questionIndex, answerIndex) => {\n    const newAnswers = [...answers];\n    newAnswers[questionIndex] = answerIndex;\n    setAnswers(newAnswers);\n  }\n\n  const handleSubmit = async () => {\n    // Check if all questions are answered\n    if (answers.some(answer => answer === null)) {\n      setError(\"Please answer all questions before submitting.\");\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError(\"\");\n      \n      // Create a proper answer object with question IDs as keys and selected option indices as values\n      const formattedAnswers = {};\n      questions.forEach((question, index) => {\n        // Make sure we're using the question ID as the key and converting the answer to a string\n        if (question && question.id) {\n          formattedAnswers[question.id] = String(answers[index]);\n        } else {\n          // Fallback if question doesn't have an ID\n          formattedAnswers[`question-${index}`] = String(answers[index]);\n        }\n      });\n      \n      console.log(\"Submitting answers:\", formattedAnswers);\n      const response = await assessmentService.submitAssessment(id, formattedAnswers);\n      setResult(response.data);\n      setSubmitted(true);\n    } catch (err) {\n      console.error(\"Error submitting assessment:\", err);\n      setError(\"Failed to submit your answers. Please try again.\");\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  const navigateToNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  }\n\n  const navigateToPreviousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  }\n\n  if (loading) {\n    return (\n      <Container className=\"py-5 text-center\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n        <p className=\"mt-3\">Loading assessment...</p>\n      </Container>\n    );\n  }\n\n  if (!assessment || !questions || questions.length === 0) {\n    return (\n      <Container className=\"py-5 text-center\">\n        <Alert variant=\"danger\">\n          Assessment not found or has no questions.\n        </Alert>\n        <Button \n          variant=\"primary\" \n          onClick={() => navigate(-1)}\n          className=\"mt-3\"\n        >\n          Go Back\n        </Button>\n      </Container>\n    );\n  }\n\n  // Results screen after submission\n  if (submitted && result) {\n    return (\n      <Container className=\"py-4\">\n        <Card className=\"shadow-sm border-0 mb-4\">\n          <Card.Body className=\"p-4 text-center\">\n            <h2>Assessment Completed!</h2>\n            <p className=\"lead mb-4\">Thank you for completing the assessment.</p>\n            \n            <Row className=\"justify-content-center mb-4\">\n              <Col md={6}>\n                <Card className=\"bg-light border-0\">\n                  <Card.Body>\n                    <h3 className=\"mb-3\">Your Score</h3>\n                    <div className=\"display-4 mb-3\">{result.score} / {assessment.maxScore}</div>\n                    <ProgressBar \n                      now={(result.score / assessment.maxScore) * 100} \n                      variant={\n                        (result.score / assessment.maxScore) >= 0.7 ? \"success\" : \n                        (result.score / assessment.maxScore) >= 0.4 ? \"warning\" : \"danger\"\n                      }\n                      className=\"mb-3\"\n                    />\n                    <p>\n                      {(result.score / assessment.maxScore) >= 0.7 ? \"Excellent work!\" : \n                       (result.score / assessment.maxScore) >= 0.4 ? \"Good effort!\" : \"Keep studying!\"}\n                    </p>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n            \n            <div className=\"d-flex justify-content-center gap-3\">\n              {course && (\n                <Button \n                  variant=\"primary\"\n                  onClick={() => navigate(`/course/${course.courseId}`)}\n                >\n                  Return to Course\n                </Button>\n              )}\n              <Button \n                variant=\"outline-secondary\"\n                onClick={() => navigate(user.role === \"Student\" ? \"/student-dashboard\" : \"/instructor-dashboard\")}\n              >\n                Go to Dashboard\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n\n  // Assessment taking interface\n  return (\n    <Container className=\"py-4\">\n      {viewMode && (\n        <div className=\"mb-4\">\n          <Button \n            variant=\"outline-secondary\" \n            onClick={() => navigate('/assessment-management')}\n          >\n            ← Back to Assessment Management\n          </Button>\n        </div>\n      )}\n      \n      <Card className=\"shadow-sm border-0 mb-4\">\n        <Card.Body className=\"p-4\">\n          <h2>{assessment.title}</h2>\n          {course && (\n            <p className=\"text-muted\">Course: {course.title}</p>\n          )}\n          <div className=\"d-flex justify-content-between align-items-center mb-4\">\n            <div>\n              <span className=\"badge bg-primary me-2\">\n                {questions.length} Questions\n              </span>\n              <span className=\"badge bg-secondary\">\n                Max Score: {assessment.maxScore}\n              </span>\n            </div>\n            <div>\n              Question {currentQuestion + 1} of {questions.length}\n            </div>\n          </div>\n\n          {error && (\n            <Alert variant=\"danger\" className=\"mb-4\">\n              {error}\n            </Alert>\n          )}\n\n          <ProgressBar \n            now={(currentQuestion / questions.length) * 100} \n            className=\"mb-4\"\n          />\n\n          {/* Current Question */}\n          <Card className=\"mb-4 border-0 shadow-sm\">\n            <Card.Body className=\"p-4\">\n              <h4 className=\"mb-4\">\n                {questions[currentQuestion] && typeof questions[currentQuestion].text === 'string' \n                  ? questions[currentQuestion].text \n                  : `Question ${currentQuestion + 1}`}\n              </h4>\n              \n              <Form>\n                {questions[currentQuestion]?.options?.map((option, index) => (\n                  <Form.Check\n                    key={index}\n                    type=\"radio\"\n                    id={`option-${index}`}\n                    name={`question-${currentQuestion}`}\n                    label={typeof option === 'string' ? option : `Option ${index + 1}`}\n                    checked={answers[currentQuestion] === index}\n                    onChange={() => handleAnswerSelect(currentQuestion, index)}\n                    className=\"mb-3\"\n                  />\n                ))}\n              </Form>\n            </Card.Body>\n          </Card>\n\n          {/* Navigation Buttons */}\n          <div className=\"d-flex justify-content-between\">\n            <Button\n              variant=\"outline-secondary\"\n              onClick={navigateToPreviousQuestion}\n              disabled={currentQuestion === 0}\n            >\n              Previous\n            </Button>\n\n            {currentQuestion < questions.length - 1 ? (\n              <Button\n                variant=\"primary\"\n                onClick={navigateToNextQuestion}\n              >\n                Next\n              </Button>\n            ) : (\n              <Button\n                variant=\"success\"\n                onClick={handleSubmit}\n                disabled={submitting}\n              >\n                {submitting ? \"Submitting...\" : \"Submit Assessment\"}\n              </Button>\n            )}\n          </div>\n        </Card.Body>\n      </Card>\n\n      {/* Question Navigation */}\n      <Card className=\"shadow-sm border-0\">\n        <Card.Body className=\"p-4\">\n          <h5 className=\"mb-3\">Question Navigation</h5>\n          <div className=\"d-flex flex-wrap gap-2\">\n            {answers.map((answer, index) => (\n              <Button\n                key={index}\n                variant={\n                  currentQuestion === index\n                    ? \"primary\"\n                    : answer !== null\n                    ? \"success\"\n                    : \"outline-secondary\"\n                }\n                size=\"sm\"\n                onClick={() => setCurrentQuestion(index)}\n              >\n                {index + 1}\n              </Button>\n            ))}\n          </div>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default AssessmentPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}